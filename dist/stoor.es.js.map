{"version":3,"file":"stoor.es.js","sources":["../src/index.js"],"sourcesContent":["'use strict'\n\nlet storage = {}\n\nconst inMemory = {\n  getItem (key) {\n    return storage[key] || null\n  },\n\n  setItem (key, value) {\n    storage[key] = value\n    return true\n  },\n\n  removeItem (key) {\n    if (key in storage) {\n      return delete storage[key]\n    }\n\n    return false\n  },\n\n  clear () {\n    storage = {}\n    return true\n  }\n}\n\n// http://stackoverflow.com/a/27081419\nconst isSupported = function (storageType) {\n  if (typeof storageType === 'object') {\n    try {\n      storageType.setItem('localStorage', 1)\n      storageType.removeItem('localStorage')\n      return true\n    } catch (e) {\n      return false\n    }\n  }\n\n  return false\n}\n\nclass Stoor {\n  constructor (opts = { namespace: '', fallback: inMemory }) {\n    if (!(this instanceof Stoor)) {\n      return new Stoor(opts)\n    }\n\n    if (!opts.fallback.getItem || !opts.fallback.setItem || !opts.fallback.removeItem) {\n      throw new Error('Invalid fallback provided')\n    }\n\n    if (opts.storage === 'session') {\n      this.storage = isSupported(window.sessionStorage) ? window.sessionStorage : opts.fallback\n    } else {\n      this.storage = isSupported(window.localStorage) ? window.localStorage : opts.fallback\n    }\n\n    this.namespace = opts.namespace\n  }\n\n  get (key) {\n    if (Array.isArray(key)) {\n      return key.map(currentKey => {\n        const namespacedKey = `${this.namespace}:${currentKey}`\n        return JSON.parse(this.storage.getItem(namespacedKey))\n      })\n    }\n\n    const namespacedKey = `${this.namespace}:${key}`\n    return JSON.parse(this.storage.getItem(namespacedKey))\n  }\n\n  set (key, value) {\n    if (Array.isArray(key)) {\n      return key.map(pair => {\n        const [key, value] = pair\n        const namespacedKey = `${this.namespace}:${key}`\n        return this.storage.setItem(namespacedKey, JSON.stringify(value))\n      })\n    }\n\n    const namespacedKey = `${this.namespace}:${key}`\n    return this.storage.setItem(namespacedKey, JSON.stringify(value))\n  }\n\n  remove (key) {\n    if (Array.isArray(key)) {\n      return key.map(currentKey => {\n        const namespacedKey = `${this.namespace}:${currentKey}`\n        return this.storage.removeItem(namespacedKey)\n      })\n    }\n\n    const namespacedKey = `${this.namespace}:${key}`\n    return this.storage.removeItem(namespacedKey)\n  }\n\n  clear () {\n    return this.storage.clear()\n  }\n}\n\nexport default Stoor\n"],"names":["let","storage","inMemory","getItem","key","setItem","value","removeItem","clear","isSupported","storageType","e","Stoor","opts","this","fallback","Error","window","sessionStorage","localStorage","namespace","get","Array","isArray","map","currentKey","JSON","parse","set","pair","stringify","remove"],"mappings":"AAEAA,IAAIC,KAEEC,GACJC,iBAASC,GACP,OAAOH,EAAQG,IAAQ,MAGzBC,iBAASD,EAAKE,GAEZ,OADAL,EAAQG,GAAOE,GACR,GAGTC,oBAAYH,GACV,OAAIA,KAAOH,UACKA,EAAQG,IAM1BI,iBAEE,OADAP,MACO,IAKLQ,EAAc,SAAUC,GAC5B,GAA2B,iBAAhBA,EACT,IAGE,OAFAA,EAAYL,QAAQ,eAAgB,GACpCK,EAAYH,WAAW,iBAChB,QACAI,GACP,OAAO,EAIX,OAAO,GAGHC,EACJ,WAAaC,GACX,6BAD+B,YAAcX,MACvCY,gBAAgBF,GACpB,OAAO,IAAIA,EAAMC,OAGdA,EAAKE,SAASZ,UAAYU,EAAKE,SAASV,UAAYQ,EAAKE,SAASR,WACrE,MAAM,IAAIS,MAAM,6BAIhBF,KAAKb,QADc,YAAjBY,EAAKZ,QACQQ,EAAYQ,OAAOC,gBAAkBD,OAAOC,eAAiBL,EAAKE,SAElEN,EAAYQ,OAAOE,cAAgBF,OAAOE,aAAeN,EAAKE,SAG/ED,KAAKM,UAAYP,EAAKO,uBAGxBC,aAAKjB,cACH,OAAIkB,MAAMC,QAAQnB,GACTA,EAAIoB,aAAIC,GAEb,OAAOC,KAAKC,MAAMb,EAAKb,QAAQE,QADNW,gBAAkBW,MAMxCC,KAAKC,MAAMb,KAAKb,QAAQE,QADNW,mBAAkBV,iBAI7CwB,aAAKxB,EAAKE,cACR,OAAIgB,MAAMC,QAAQnB,GACTA,EAAIoB,aAAIK,GAGb,OAAOf,EAAKb,QAAQI,QADKS,qBACkBY,KAAKI,mBAK7ChB,KAAKb,QAAQI,QADKS,mBAAkBV,EACAsB,KAAKI,UAAUxB,iBAG5DyB,gBAAQ3B,cACN,OAAIkB,MAAMC,QAAQnB,GACTA,EAAIoB,aAAIC,UAENX,EAAKb,QAAQM,WADKO,gBAAkBW,KAMxCX,KAAKb,QAAQM,WADKO,mBAAkBV,gBAI7CI,iBACE,OAAOM,KAAKb,QAAQO"}